import time
import json

import telebot
from telebot import types
import requests

file = open('credentials.json')
creds = json.load(file)
file.close()

LAUNCH_OFFSET = 0
bot = telebot.TeleBot(creds['token'])


def isCommand(message, command=None):
    if message.entities is None:
        return False

    for entity in message.entities:
        if entity.type == 'bot_command':
            if command is not None:
                if message.text.startswith('/{command}'.format(command=command)):
                    return True
                return False
            return True

def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üêº –ü—Ä–æ—Ñ–∏–ª—å')
    btn2 = types.KeyboardButton('üíµ –ú–∞—Ä–∫–µ—Ç')
    btn3 = types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø Steam Market Helper.', reply_markup=markup)
    bot.send_message(message.from_user.id, '‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', reply_markup=markup)

def help(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(message.from_user.id, '–î–æ—Å—Ç—É–ø—ã–µ –∫–æ–º–º–∞–Ω–¥—ã:\n\n/help - –ü–æ–º–æ—â—å\n/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –±–æ—Ç–∞\n/menu - –ú–µ–Ω—é\n/profile - –ü—Ä–æ—Ñ–∏–ª—å Steam\n/market - –ú–µ–Ω—é Steam Market\n/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=markup)

def info(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¢–æ—Ä–≥–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–æ–π –≤ Steam –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤, –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –∫–∞–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–∞–∫ –∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É, —Ç–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤.', reply_markup=markup)

def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton('üêº –ü—Ä–æ—Ñ–∏–ª—å')
    btn2 = types.KeyboardButton('üíµ –ú–∞—Ä–∫–µ—Ç')
    btn3 = types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', reply_markup=markup)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞

def profile(message):
    sp = getSteamProfileToStr(message)
    bot.send_message(message.from_user.id, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å Steam:\n{profile}'.format(profile=sp))  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton('üêº –ü—Ä–æ—Ñ–∏–ª—å')
    btn2 = types.KeyboardButton('üíµ –ú–∞—Ä–∫–µ—Ç')
    btn3 = types.KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.from_user.id, 'üëÄ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª', reply_markup=markup)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞

def market(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton('üßî –ö—É–ø–∏—Ç—å')
    btn2 = types.KeyboardButton('‚úèÔ∏è–ü—Ä–æ–¥–∞—Ç—å')
    btn3 = types.KeyboardButton('‚úèÔ∏è–û—Ä–¥–µ—Ä –ø–æ–∫—É–ø–∫–∏')
    btn4 = types.KeyboardButton('‚úèÔ∏è–û—Ä–¥–µ—Ä –ø—Ä–æ–¥–∞–∂–∏')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.from_user.id, '‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª', reply_markup=markup)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞

def settings(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton('üßî –ê–∫–∫–∞—É–Ω—Ç')
    btn2 = types.KeyboardButton('‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id, '‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª', reply_markup=markup)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞

def isText(message):
    if message.content_type == "text":
        return True
    return False

def getSteamProfileToStr(message):
    return "–ü—Ä–æ—Ñ–∏–ª—å Steam –Ω–µ —É–∫–∞–∑–∞–Ω"

def getAccDataToStr(message):
    return "–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã"

def get_text_messages(message, ts, eq):

    if message.text == 'üìù –ú–µ–Ω—é':
        menu(message)

    elif message.text == 'üêº –ü—Ä–æ—Ñ–∏–ª—å':
        profile(message)

    elif message.text == 'üíµ –ú–∞—Ä–∫–µ—Ç':
        market(message)

    elif message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        settings(message)

    elif message.text == 'üßî –ö—É–ø–∏—Ç—å':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        eq.addEvent({
            'id': '1251234',
            'event': 'getPrice'
        })
        bot.send_message(message.from_user.id, '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É', reply_markup=markup)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞

    elif message.text == '‚úèÔ∏è–û—Ä–¥–µ—Ä –ø–æ–∫—É–ø–∫–∏':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        ts.addTask({
            'id': '1251234',
            'event': 'getPrice'
        })
        bot.send_message(message.from_user.id, '–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–æ—Ä–¥–µ—Ä–∞', reply_markup=markup)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞

    elif message.text == '‚úèÔ∏è–û—Ä–¥–µ—Ä –ø—Ä–æ–¥–∞–∂–∏':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        ts.delTask('1251234')
        bot.send_message(message.from_user.id, '–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ—Ä–¥–µ—Ä–∞', reply_markup=markup)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞

    elif message.text == 'üßî –ê–∫–∫–∞—É–Ω—Ç':
        accdata = getAccDataToStr(message)
        bot.send_message(message.from_user.id, '–î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n{acc}'.format(acc=accdata))  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('üßî –ê–∫–∫–∞—É–Ω—Ç')
        btn2 = types.KeyboardButton('‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, '‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª', reply_markup=markup)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞

    elif message.text == '‚úèÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btn1 = types.KeyboardButton('üßî 1')
        btn2 = types.KeyboardButton('‚úèÔ∏è2')
        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, '‚¨á –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è', reply_markup=markup)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞



class EventQueue:
    def __init__(self, queue):
        self.queue = queue

    def getEvent(self):
        return self.queue.pop()

    def addEvent(self, event):
        self.queue.insert(0, event)

    def getQueue(self):
        return self.queue

    def getLength(self):
        return len(self.queue)

    def isEmpty(self):
        if len(self.queue) == 0:
            return True
        return False

class TaskStorage:
    def __init__(self, storage):
        self.storage = storage

    def saveStorage(self, filename):
        with open('storage.json', 'w') as f:
            json.dump(self.storage, f)

    def getTasks(self):
        arr = []
        for task in self.storage:
            arr.append(self.storage[task])
        return arr

    def addTask(self, task):
        self.storage[task['id']] = task
        self.saveStorage('storage.json')

    def delTask(self, id):
        self.storage.pop(id)
        self.saveStorage('storage.json')

    def isEmpty(self):
        if len(self.storage) == 0:
            return True
        return False

class EventLoop:
    def __init__(self, globalOffset):
        self.globalOffset = globalOffset

    def loadData(self, filename):
        file = open(filename)
        data = json.load(file)
        file.close()
        return data

    def launch(self):

        storage = self.loadData("storage.json")
        eq = EventQueue([])
        ts = TaskStorage(storage)


        while True:
            try:
                print(1)
                if not ts.isEmpty():
                    tasks = ts.getTasks()
                    for task in tasks:
                        print(task)

                if not eq.isEmpty():
                    for i in range(eq.getLength()):
                        event = eq.getEvent()
                        print(event)

                # bot.send_message(message.from_user.id)

                # response = requests.post(MethodGetUpdates)
                # result = response.json()
                # print(result)
                # print(offset)
                updates = bot.get_updates(offset=self.globalOffset)
                for update in updates:
                    print(update)
                    if isCommand(update.message):
                        if isCommand(update.message, "start"):
                            start(update.message)
                        elif isCommand(update.message, "help"):
                            help(update.message)
                        elif isCommand(update.message, "info"):
                            info(update.message)
                        elif isCommand(update.message, "menu"):
                            menu(update.message)
                        elif isCommand(update.message, "profile"):
                            profile(update.message)
                        elif isCommand(update.message, "market"):
                            market(update.message)
                        elif isCommand(update.message, "settings"):
                            settings(update.message)


                    elif isText(update.message):
                        get_text_messages(update.message, ts, eq)
                    self.globalOffset = update.update_id + 1
                time.sleep(1)
            except Exception as e:
                print("Error: ", e)


El = EventLoop(LAUNCH_OFFSET)
El.launch()

#bot.polling(none_stop=True, interval=0, timeout=20)
#bot.infinity_polling(interval=0, timeout=20)